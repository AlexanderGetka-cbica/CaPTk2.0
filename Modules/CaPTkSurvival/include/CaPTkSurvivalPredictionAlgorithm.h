/**
\file  CaPTkSurvivalPredictionAlgorithm.h

\brief The header file containing the CaPTkSurvivalPredictionAlgorithm class, used to build machine learning models
Library Dependecies: ITK 4.7+ <br>

https://www.med.upenn.edu/sbia/software/ <br>
software@cbica.upenn.edu

Copyright (c) 2016 University of Pennsylvania. All rights reserved. <br>
See COPYING file or https://www.med.upenn.edu/sbia/software-agreement.html

*/
#ifndef CaPTkSurvivalPredictionAlgorithm_h
#define CaPTkSurvivalPredictionAlgorithm_h

// The following header file is generated by CMake and thus it's located in
// the build directory. It provides an export macro for classes and functions
// that you want to be part of the public interface of your module.
#include <MitkCaPTkSurvivalExports.h>

#include "itkExtractImageFilter.h"
#include "itkCSVArray2DFileReader.h"
#include <itkConstantBoundaryCondition.h>
#include <itkVariableSizeMatrix.h>
#include <itkVariableLengthVector.h>
#include <itkVector.h>

#include <string>
#include <QString>

namespace captk
{
class MITKCAPTKSURVIVAL_EXPORT SurvivalPredictionModuleAlgorithm
{
public:
  /**** Types ****/

  using VectorDouble = std::vector < double >;
  using VariableSizeMatrixType = itk::VariableSizeMatrix< double >;
  using VariableLengthVectorType = itk::VariableLengthVector< double >;
  typedef itk::Image< float, 3 > ImageType;
  typedef std::tuple<VectorDouble, VectorDouble, VariableSizeMatrixType, VectorDouble, 
                     VectorDouble, VariableSizeMatrixType, VectorDouble> FoldTupleType;
  typedef std::map<int, FoldTupleType> MapType;

  typedef std::tuple<VectorDouble, VectorDouble, VariableSizeMatrixType> TrainingDataTuple;
  typedef std::map<int, TrainingDataTuple> TrainingMapType;

  typedef std::tuple<VectorDouble, VectorDouble, VariableSizeMatrixType, VectorDouble> TestingDataTuple;
  typedef std::map<int, TestingDataTuple> TestingMapType;

  typedef itk::CSVArray2DFileReader<double> CSVFileReaderType;
  typedef vnl_matrix<double> MatrixType;

  /**** Public methods ****/

  SurvivalPredictionModuleAlgorithm() {};
  ~SurvivalPredictionModuleAlgorithm() {};

  /** \brief Runs the algorithm
   * 
   * @return first field is true when execution went fine, std::string is the potential error message
   */
  std::tuple<bool, std::string> 
  Run(
          QString modelDir,
          QString outputDir,
          QString subjectDir// TODO: include parameters
      );


};
}

#endif // ! CaPTkSurvivalPredictionAlgorithm_h
